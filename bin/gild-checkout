#! /usr/bin/env python3
#
# This script checks out a specific branch version and applies
# all patches associated to that branch
#
# (c) 2014-2019 by Sebastian Bauer
#

from __future__ import print_function

import glob
import os.path
import sys
import argparse

from subprocess import call

from gildutils import find_component_base
from gildutils import get_components
from gildutils import get_repo_url

from gildutils import component_completer
from gildutils import branch_completer
from gildutils import autocomplete

parser = argparse.ArgumentParser(description='Check out a specific branch for a component and apply patches')
parser.add_argument('component', help="The name of the component to be checked out.").completer = component_completer
parser.add_argument('branch', help="The branch as specified in the series.").completer = branch_completer
parser.add_argument('--skip-patches', action='store_true', help="Don't apply the patches, but only checkout.")
parser.add_argument('--sha1', action='store_true', help="The 'checkout' is a SHA1 and not a tag or branch. This will be slower to checkout.")
autocomplete(parser)
args = parser.parse_args()

# The base path
base = find_component_base(args.component)

# The series file relating branches to checkout ids
series = os.path.join(base, "series")

# The requested branch
reqbranch = args.branch

# Open the branch <-> checkout id table
lines = [line.strip() for line in open(series)]

# Determine branch name
branchok = False
for line in lines:
	branch, checkout, url = line.split("\t")
	if branch == reqbranch:
		branchok = True
		break

if not branchok:
	sys.exit("Couldn't find requested branch")

repo_path = os.path.join(base, "repo")

if not os.path.exists(repo_path):
	# Repo doesn't exist yet, try to initialize it, actually we just
	# shallow clone enough for that specific branch

	repo_url = get_repo_url(base)
	os.chdir(base)

	# clone branch 'checkout' or repo_url to 'repo'
	if not args.sha1:
		call(["git", "clone", repo_url, "--depth=1", "-b", checkout, "repo"])
	else:
		# But, if it is a commit id/sha1 then we need to pull the WHOLE
		# thing! This increases the amount of time to clone, but since
		# this is only done at the beginning of a new ADTOOLS
		# cross-compilation thenperhaps it is not that big a deal.
		call(["git", "clone", repo_url, "repo"])

os.chdir(repo_path)

def co():
	return call(["git", "checkout", checkout, "-B", branch])

if co() != 0:
	# Try to fetch all existing refs
	call(["git", "fetch", "origin"])
	if co() != 0:
		# TODO: Fix failure on shallow clones
		sys.exit('Failed to checkout {0}'.format(branch))

call(["git", "branch", "-f", branch+"-base"])

# Check if there are any submodules and warn (for now)
if os.path.exists(".gitmodules") and os.path.isfile(".gitmodules"):
	print("Checkout defines some git submodules.", file=sys.stderr)

if args.skip_patches:
	sys.exit()

# List of all patches
patches = os.path.join("..",branch,"patches","*.patch")
all_patches = sorted(glob.glob(patches))

# Apply them (if any)
if len(all_patches) > 0:
	call(["git", "am", "--3way", "--committer-date-is-author-date"] + all_patches)
